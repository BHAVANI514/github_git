ðŸ”¹ Git Interview Questions & Answers (with Examples)
1. What is the difference between Git and GitHub?

Git: Local version control tool â†’ installed on system.

GitHub: Cloud hosting platform for Git repositories.

ðŸ‘‰ Example:
You can use Git even without internet, but GitHub is needed for team collaboration.

2. Explain the Git workflow.

Working Directory â†’ modify files.

Staging Area â†’ git add stores changes temporarily.

Local Repository â†’ git commit saves permanently.

Remote Repository â†’ git push sends changes to GitHub.

ðŸ‘‰ Example:
Write code â†’ git add . â†’ git commit -m "msg" â†’ git push origin main.

3. What is the difference between git pull and git fetch?

git fetch â†’ Downloads changes from remote but doesnâ€™t merge.

git pull â†’ Fetch + Merge changes automatically.

ðŸ‘‰ Real-time:
If you want to first review changes before merging, use fetch.

4. What are branches in Git?

A branch is a copy of the code where you can work independently.

main is stable, while features are developed in separate branches.

ðŸ‘‰ Example:

git checkout -b feature-login


Now you can work on login feature without affecting main.

5. How do you resolve merge conflicts?

A merge conflict happens when two people edit the same part of a file.
Steps:

Git marks conflict with <<<<<<<, =======, >>>>>>>.

Manually edit file to keep correct version.

Stage and commit again.

ðŸ‘‰ Real-time:
Two developers changed config.yaml in different ways â†’ conflict â†’ resolve â†’ commit.

6. What is .gitignore?

File that tells Git which files NOT to track.

ðŸ‘‰ Example .gitignore:

node_modules/
.env
*.log


This avoids pushing unnecessary or sensitive files.

7. What is Git stash?

Stash is used to temporarily save uncommitted changes.

ðŸ‘‰ Example:

git stash      # Save work
git checkout main
git pull
git checkout feature
git stash pop  # Restore work


Useful when switching branches in middle of work.

8. Difference between git reset, git revert, and git checkout?

git reset â†’ Undo commits (history changes).

git revert â†’ Creates new commit that undoes changes (safe in team).

git checkout â†’ Switch branches or restore files.

ðŸ‘‰ Real-time:

If commit is wrong â†’ use revert in team (keeps history).

If working alone â†’ reset is fine.

9. What is the difference between merge and rebase?

Merge: Combines branches with a new commit. Keeps history.

Rebase: Moves branch on top of another. Makes history linear.

ðŸ‘‰ Example:

Merge â†’ Better for teamwork (history preserved).

Rebase â†’ Cleaner history (used in solo projects).

10. What is a detached HEAD in Git?

HEAD â†’ pointer to current branch.

Detached HEAD happens when you checkout a commit instead of a branch.

ðŸ‘‰ Example:

git checkout abc123   # commit ID


Now HEAD is detached â†’ not on any branch.

11. What is a Pull Request (PR)?

A request to merge your branch into main (done on GitHub/GitLab).

Allows code review, testing, and approval before merging.

ðŸ‘‰ Example:
You push feature-api â†’ create PR â†’ team reviews â†’ merge into main.

12. What is the difference between git clone and git fork?

Clone â†’ Copy repo to local.

Fork â†’ Copy repo into your GitHub account (used in open source).

13. How do you squash commits?

Squashing = Combine multiple commits into one.

git rebase -i HEAD~3


Choose squash â†’ creates single commit.

ðŸ‘‰ Example:
3 commits like "typo fix", "small update", "final fix" â†’ squash into "Fixed login bug".

14. What is git cherry-pick?

Apply a specific commit from one branch into another.

ðŸ‘‰ Example:

git cherry-pick abc123


Useful if only 1 commit needs to be applied instead of full branch.

15. How do you check difference between commits?
git diff commit1 commit2


Shows line-by-line changes between two commits.